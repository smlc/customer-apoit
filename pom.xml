<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.3.2.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.appointement.app</groupId>
	<artifactId>custoapp</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>custoapp</name>
	<description>Demo project for Spring Boot</description>

	<properties>
		<java.version>11</java.version>
		<frontend-maven-plugin.version>1.8.0</frontend-maven-plugin.version>
		<frontend-maven-plugin.nodeVersion>v12.10.0</frontend-maven-plugin.nodeVersion>
		<frontend-maven-plugin.npmVersion>6.10.3</frontend-maven-plugin.npmVersion>
		<db.url>${env.JDBC_DATABASE_URL}</db.url>
		<db.username>${env.JDBC_DATABASE_USERNAME}</db.username>
		<db.password>${env.JDBC_DATABASE_PASSWORD}</db.password>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jooq</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-mail</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
	</dependencies>

	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<excludes>
					<exclude>**/*.html</exclude>
					<exclude>**/*.css</exclude>
					<exclude>**/*.js</exclude>
				</excludes>
			</resource>
		</resources>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>com.github.eirslett</groupId>
					<artifactId>frontend-maven-plugin</artifactId>
					<version>${frontend-maven-plugin.version}</version>
					<executions>
						<execution>
							<id>install-frontend-tooling</id>
							<goals>
								<goal>install-node-and-npm</goal>
							</goals>
							<configuration>
								<nodeVersion>${frontend-maven-plugin.nodeVersion}
								</nodeVersion>
								<npmVersion>${frontend-maven-plugin.npmVersion}
								</npmVersion>
							</configuration>
						</execution>
						<execution>
							<id>npm install</id>
							<goals>
								<goal>npm</goal>
							</goals>
						</execution>
						<execution>
							<id>run-gulp-build</id>
							<goals>
								<goal>npm</goal>
							</goals>
							<configuration>
								<arguments>run build</arguments>
								<npmInheritsProxyConfigFromMaven>false</npmInheritsProxyConfigFromMaven>
							</configuration>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.flywaydb</groupId>
				<artifactId>flyway-maven-plugin</artifactId>
				<version>3.0</version>
				<!-- Note that we're executing the Flyway plugin in the "generate-sources" phase -->
				<executions>
					<execution>
						<phase>generate-sources</phase>
						<goals>
							<goal>migrate</goal>
						</goals>
					</execution>
				</executions>

				<!-- Note that we need to prefix the db/migration path with filesystem: to prevent Flyway
					 from looking for our migration scripts only on the classpath -->
				<configuration>
					<schemas>
						<schema>public</schema>
					</schemas>
					<url>${db.url}</url>
					<user>${db.username}</user>
					<password>${db.password}</password>
					<locations>
						<location>filesystem:src/main/resources/db/migration</location>
					</locations>
				</configuration>
			</plugin>
			<plugin>

				<groupId>org.jooq</groupId>
				<artifactId>jooq-codegen-maven</artifactId>
				<version>3.13.3</version>

				<!-- The jOOQ code generation plugin is also executed in the generate-sources phase, prior to compilation -->
				<executions>
					<execution>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
					</execution>
				</executions>

				<!-- This is a minimal working configuration. See the manual's section about the code generator for more details -->
				<configuration>
					<jdbc>
						<url>${db.url}</url>
						<user>${db.username}</user>
						<password>${db.password}</password>
					</jdbc>
					<generator>
						<database>
							<includes>.*</includes>
							<excludes>DATABASE.* | FLYWAY_SCHEMA_HISTORY |
								SCHEMA_VERSION
							</excludes>
							<inputSchema>public</inputSchema>
						</database>
						<target>
							<packageName>com.appointement.app.custoapp.db</packageName>
							<directory>src/main/java</directory>
						</target>
					</generator>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>com.github.eirslett</groupId>
				<artifactId>frontend-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
