/*
 * This file is generated by jOOQ.
 */
package com.appointement.app.custoapp.db.tables;


import com.appointement.app.custoapp.db.Keys;
import com.appointement.app.custoapp.db.Public;
import com.appointement.app.custoapp.db.tables.records.AppointmentRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Appointment extends TableImpl<AppointmentRecord> {

    private static final long serialVersionUID = 1579929994;

    /**
     * The reference instance of <code>public.appointment</code>
     */
    public static final Appointment APPOINTMENT = new Appointment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AppointmentRecord> getRecordType() {
        return AppointmentRecord.class;
    }

    /**
     * The column <code>public.appointment.id</code>.
     */
    public final TableField<AppointmentRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.appointment.start_datetime_at</code>.
     */
    public final TableField<AppointmentRecord, OffsetDateTime> START_DATETIME_AT = createField(DSL.name("start_datetime_at"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * The column <code>public.appointment.end_datetime_at</code>.
     */
    public final TableField<AppointmentRecord, OffsetDateTime> END_DATETIME_AT = createField(DSL.name("end_datetime_at"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * The column <code>public.appointment.created_at</code>.
     */
    public final TableField<AppointmentRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.appointment.user_email</code>.
     */
    public final TableField<AppointmentRecord, String> USER_EMAIL = createField(DSL.name("user_email"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.appointment.user_phone</code>.
     */
    public final TableField<AppointmentRecord, String> USER_PHONE = createField(DSL.name("user_phone"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.appointment.services</code>.
     */
    public final TableField<AppointmentRecord, String> SERVICES = createField(DSL.name("services"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.appointment.status</code>.
     */
    public final TableField<AppointmentRecord, String> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.appointment.place</code>.
     */
    public final TableField<AppointmentRecord, String> PLACE = createField(DSL.name("place"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>public.appointment</code> table reference
     */
    public Appointment() {
        this(DSL.name("appointment"), null);
    }

    /**
     * Create an aliased <code>public.appointment</code> table reference
     */
    public Appointment(String alias) {
        this(DSL.name(alias), APPOINTMENT);
    }

    /**
     * Create an aliased <code>public.appointment</code> table reference
     */
    public Appointment(Name alias) {
        this(alias, APPOINTMENT);
    }

    private Appointment(Name alias, Table<AppointmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Appointment(Name alias, Table<AppointmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Appointment(Table<O> child, ForeignKey<O, AppointmentRecord> key) {
        super(child, key, APPOINTMENT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<AppointmentRecord> getPrimaryKey() {
        return Keys.APPOINTMENT_PKEY;
    }

    @Override
    public List<UniqueKey<AppointmentRecord>> getKeys() {
        return Arrays.<UniqueKey<AppointmentRecord>>asList(Keys.APPOINTMENT_PKEY);
    }

    @Override
    public Appointment as(String alias) {
        return new Appointment(DSL.name(alias), this);
    }

    @Override
    public Appointment as(Name alias) {
        return new Appointment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Appointment rename(String name) {
        return new Appointment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Appointment rename(Name name) {
        return new Appointment(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<UUID, OffsetDateTime, OffsetDateTime, OffsetDateTime, String, String, String, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
